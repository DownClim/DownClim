# Test New Caledonia {.unnumbered}

## Packages

Using tidyvserse, ggplot2 and patchwork for data wrangling and plotting; sf, terra, geodata, leaflet, and tidyterra for spatial data manipulation and plotting; and foreach and doParallel for parallelisation.

```{r pkg}
#| message: false
library(tidyverse)
library(ggplot2)
library(patchwork)
library(sf)
library(terra)
library(geodata)
library(leaflet)
library(tidyterra)
library(foreach)
library(doParallel)
path <- "data"
cores <- 20
```

## Area

Test with New Caledonia, extracting the bounding box. The data from GADM includes a lot of island. Maybe land masking could be important in the case of islands.

```{r getnc}
nc <- gadm("New Caledonia", path = path, leval = 0) %>% 
  st_as_sf() %>% 
  st_union()
nc_bb <- st_bbox(nc) %>% 
  st_as_sfc()
```

```{r plotnc}
leaflet() %>% 
  addTiles() %>%
  addPolygons(data = nc_bb) %>% 
  addPolygons(data = nc, col = "red")
```

## CHELSA

Test with CHELSA temperature at surface tas for January (01) from 1980 to 2019 split in two datasets: historical (1980:2005) and evaluation (2006:2019) means.

```{r get_chelsa}
get_chelsa <- function(
    month, # 1
    year, # 1980
    variable, # tas
    bbox,
    frequency = "monthly",
    base_url = "https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL",
    path = "data"
) {
  # check receiving folders
  if(!dir.exists(file.path(path, "chelsa", "raw")))
    stop("The folder to stock raw rasters is missing")
  if(!dir.exists(file.path(path, "chelsa", "cropped")))
    stop("The folder to stock cropped rasters is missing")
  # define file, url, & outputs
  file <- paste0(c("CHELSA", 
                   variable, 
                   sprintf("%02d", month),
                   year,
                   "V.2.1.tif"), 
                 collapse = "_")
  url <- file.path(base_url, frequency, variable, file)
  raw_file <- file.path(path, "chelsa", "raw", file)
  cropped_file <- file.path(path, "chelsa", "cropped", file)
  # dl & crop
  if(!file.exists(cropped_file)){
    if(!file.exists(raw_file))
      download.file(url, file.path(path, "chelsa", "raw", file))  
    rast(raw_file) %>% 
      crop(bbox) %>% 
      writeRaster(cropped_file)
    unlink(raw_file)
  }
}
```

```{r dl_chelsa}
#| eval: false
dir.create(file.path(path, "chelsa"))
dir.create(file.path(path, "chelsa", "raw"))
dir.create(file.path(path, "chelsa", "cropped"))
# cl <- makeCluster(cores)
# registerDoParallel(cl) 
foreach(y = 1980:2019, .packages = c("tidyverse", "terra", "sf")) %do% 
  get_chelsa(month = 1, year = y, variable = "tas", bbox = nc_bb)
# stopCluster(cl)
# rm(cl)
unlink(file.path(path, "chelsa", "raw"), recursive = TRUE)
rast(list.files(file.path(path, "chelsa", "cropped"), full.names = TRUE)) %>% 
  writeRaster(file.path(path, "chelsa", "chelsa_years.tif"))
unlink(file.path(path, "chelsa", "cropped"), recursive = TRUE)
rast(file.path(path, "chelsa", "chelsa_years.tif"))[[1:26]] %>% 
  mean() %>% 
  writeRaster(file.path(path, "chelsa", "chelsa_historical_mean.tif"))
rast(file.path(path, "chelsa", "chelsa_years.tif"))[[27:40]] %>% 
  mean() %>% 
  writeRaster(file.path(path, "chelsa", "chelsa_evaluation_mean.tif"))
```

```{r chelsa_plot}
#| message: false
hist <- rast(file.path(path, "chelsa", "chelsa_historical_mean.tif")) %>% 
  rename(january = mean)
eval <- rast(file.path(path, "chelsa", "chelsa_evaluation_mean.tif")) %>% 
  rename(january = mean)
ggplot() +
  tidyterra::geom_spatraster(data = hist) +
  scale_fill_viridis_c("tas (K)") +
  theme_bw() +
  ggtitle("Historical", "1980:2005") +
  ggplot() +
  tidyterra::geom_spatraster(data = eval) +
  scale_fill_viridis_c("tas (K)") +
  theme_bw() +
  ggtitle("Evaluation", "2006:2019") + 
  plot_layout(ncol = 1)
```

## CORDEX from CDS

Test with CORDEX temperature at surface tas (2m air temperature) for January (01) daily means using CDS, Australasian domain with 0.22° (AUS-22), RCP 8.5, MOHC-HadGEM2-ES (UK) GCM (among 4), CTP-RegCM4-7 (Italy) RCM (among 3), and ensemble r1i1p1 from 2006 to 2099. The CDS was done I'm switching to manual download on IPSL servers.

> The downloading with ecmwfr is super slow and only possible with daily means. Moreover, the raster operation to computed monthly means with terra is too heavy in R. It could be intelligently adapted, but this advocate to use another language.

```{r wf_connect}
#| eval: false
wf_set_key(
  user = "******",
  key = "********-****-****-****-************",
  service = "cds"
)
```

```{r requests_fun}
#| eval: false
requests <- function(
    domain,
    gcm, 
    rcm, 
    experiment, 
    years, 
    path
) {
  dynamic_request <- wf_archetype(
    request <- list(
      "dataset_short_name" = "projections-cordex-domains-single-levels",
      "format" = "tgz",
      "experiment" = gsub(" ", "_", gsub(".", "_", tolower(experiment), fixed = TRUE)),
      "domain" = tolower(domain),
      "variable" = c("2m_air_temperature", "mean_precipitation_flux"),
      "temporal_resolution" = "daily_mean",
      "horizontal_resolution" = "0_22_degree_x_0_22_degree",
      "gcm_model" = gsub("-", "_", tolower(gcm)),
      "rcm_model" = gsub("-", "_", tolower(rcm)),
      "ensemble_member" = "r1i1p1",
      "start_year" = years[1],
      "end_year" = year[1],
      "target" = file.path(path, "cordex", paste0(gcm, "-", rcm), 
                           paste0(domain, "_", gcm, "_", 
                                  gsub(" ", "-", experiment),
                                  "_", years[1], ".tgz"))
    ),
    dynamic_fields = c("start_year", "end_year", "target")
  )
  lapply(years, function(y)
    dynamic_request(start_year = y, end_year = y, 
                    target = file.path(path, "cordex", paste0(gcm, "-", rcm), 
                                       paste0(domain, "_", gcm, "_", 
                                              gsub(" ", "-", experiment),
                                              "_", y, ".tgz"))))
}
```

```{r dl_cds}
#| eval: false
domain = "Australasia"
gcm <- "NCC-NorESM1-M"
rcm <- "ICTP-RegCM4-7"
experiment <- "RCP 8.5"
dir.create(file.path(path, "cordex"))
dir.create(file.path(path, "cordex", paste0(gcm, "-", rcm)))
ncfile <- wf_request_batch(
  user = "152268",
  request = requests(domain, gcm, rcm, experiment, 2017:2027, path),
  workers = 20,
  path = getwd(),
  time_out = 60*60
)
```

```{r untar_cds}
#| eval: false
lapply(list.files(file.path(path, "cordex", paste0(gcm, "-", rcm)), full.names = TRUE),
       untar, exdir = file.path(path, "cordex", paste0(gcm, "-", rcm)))
```

```{r summarise_cds}
#| eval: false
r <- rast(list.files(file.path(path, "cordex", paste0(gcm, "-", rcm)), 
                pattern = ".nc", full.names = TRUE))
r_month <- tapp(r, "yearmonths", mean)
```

## CORDEX from ESGF

Test with CORDEX using [IPSL](https://esgf-node.ipsl.upmc.fr/search/cordex-ipsl/) node:

-   Australasian domain with 0.22° (AUS-22)
-   4 driving GCM: MOHC-HadGEM2-ES, MPI-M-MPI-ESM-LR, MPI-M-MPI-ESM-MR, NCC-NorESM1-M
-   3 RCM: CCLM5-0-15, REMO2015, RegCM4-7
-   3 experiments: historical, RCP 2.6, & RCP 8.5
-   ensemble r1i1p1
-   time frequency of monthly means
-   2 variables: temperature at surface tas and precipitation pr

To split in three datasets: historical (1980:2005), evaluation (2006:2019) and projection (2071:2100) means.

> The bash scripts are way faster but need to be prepared first (maybe we can look for a tool).

```{bash cdo_merge}
#| eval: false
vars=(tas pr)
gcms=(NCC-NorESM1-M MOHC-HadGEM2-ES MPI-M-MPI-ESM-LR MPI-M-MPI-ESM-MR)
rcms=(CCLM5-0-15 REMO2015 RegCM4-7)
experiments=(historical rcp26 rcp85)

for var in ${vars[@]}; do
  for experiment in ${experiments[@]}; do
    for gcm in ${gcms[@]}; do
      for rcm in ${rcms[@]}; do
        # echo "cdo mergetime raw/$var*$gcm*$experiment*$rcm* ${var}_${gcm}_${rcm}_${experiment}.nc"
        cdo mergetime raw/$var*$gcm*$experiment*$rcm* ${var}_${gcm}_${rcm}_${experiment}.nc
      done
    done
  done
done

gcms=(NCC-NorESM1-M MOHC-HadGEM2-ES MPI-M-MPI-ESM-LR MPI-M-MPI-ESM-MR)
rcms=(CCLM5-0-15 REMO2015 RegCM4-7)
experiments=(historical rcp26 rcp85)

for experiment in ${experiments[@]}; do
  for gcm in ${gcms[@]}; do
    for rcm in ${rcms[@]}; do
      cdo merge \
        year_merged/tas_${gcm}_${rcm}_${experiment}.nc \
        year_merged/pr_${gcm}_${rcm}_${experiment}.nc \
        ${gcm}_${rcm}_${experiment}.nc
    done
  done
done
```

```{r cordex}
#| eval: false
historical <- 1980:2005
dir.create(file.path(path, "cordex_esgf", "historical"))
files <- list.files(file.path(path, "cordex_esgf", "merged"), pattern = "historical")
lapply(files, function(file)
       rast(file.path(path, "cordex_esgf", "merged", file)) %>% 
         crop(nc_bb) %>% 
         subset(grepl("tas", names(.))) %>% 
         subset(year(time(.)) %in% historical) %>% 
         tapp(months, mean) %>% 
         writeRaster(file.path(path, "cordex_esgf", "historical",  
                        paste0("tas_", gsub(".nc", ".tif", file))))
       )
evaluation <- 2006:2019
dir.create(file.path(path, "cordex_esgf", "evaluation"))
files <- list.files(file.path(path, "cordex_esgf", "merged"), pattern = "_rcp")
lapply(files, function(file)
       rast(file.path(path, "cordex_esgf", "merged", file)) %>% 
         crop(nc_bb) %>% 
         subset(grepl("tas", names(.))) %>% 
         subset(year(time(.)) %in% evaluation) %>% 
         tapp(months, median) %>% 
         writeRaster(file.path(path, "cordex_esgf", "evaluation",  
                        paste0("tas_", gsub(".nc", ".tif", file))))
       )
projection <- 2071:2100
dir.create(file.path(path, "cordex_esgf", "projection"))
files <- list.files(file.path(path, "cordex_esgf", "merged"), pattern = "_rcp")
lapply(files, function(file)
       rast(file.path(path, "cordex_esgf", "merged", file)) %>% 
         crop(nc_bb) %>% 
         subset(grepl("tas", names(.))) %>% 
         subset(year(time(.)) %in% projection) %>% 
         tapp(months, mean) %>% 
         writeRaster(file.path(path, "cordex_esgf", "projection",  
                        paste0("tas_", gsub(".nc", ".tif", file))))
       )
```

### Bias

Bias is simply computed as projection minus historical means for both evaluation and projection means.

```{r cordex_bias}
#| eval: false
dir.create(file.path(path, "cordex_esgf", "eval_bias"))
files <- list.files(file.path(path, "cordex_esgf", "evaluation"), pattern = "tas")
lapply(files, function(file) {
  var <- str_split_1(file, "_")[1]
  gcm <- str_split_1(file, "_")[2]
  rcm <- str_split_1(file, "_")[3]
  rcp <- gsub(".tif", "", str_split_1(file, "_")[4])

  (rast(file.path(path, "cordex_esgf", "evaluation", file)) -
    rast(file.path(path, "cordex_esgf", "historical", 
                   paste0(var, "_", gcm, "_", rcm, "_historical.tif")))) %>% 
    writeRaster(file.path(path, "cordex_esgf", "eval_bias", file))
})
dir.create(file.path(path, "cordex_esgf", "proj_bias"))
files <- list.files(file.path(path, "cordex_esgf", "projection"), pattern = "tas")
lapply(files, function(file) {
  var <- str_split_1(file, "_")[1]
  gcm <- str_split_1(file, "_")[2]
  rcm <- str_split_1(file, "_")[3]
  rcp <- gsub(".tif", "", str_split_1(file, "_")[4])

  (rast(file.path(path, "cordex_esgf", "projection", file)) -
    rast(file.path(path, "cordex_esgf", "historical", 
                   paste0(var, "_", gcm, "_", rcm, "_historical.tif")))) %>% 
    writeRaster(file.path(path, "cordex_esgf", "proj_bias", file))
})
```

### Interpolation & downscaling

Bias is then interpolated to CHELSA resolution using bilinear interpolation (other available). Finally, CORDEX is downscaled on CHELSA by adding the interpolated bias to CHELSA historical means.

```{r cordex_ds}
#| eval: false
dir.create(file.path(path, "cordex_esgf", "eval_ds"))
files <- list.files(file.path(path, "cordex_esgf", "eval_bias"), pattern = "tas")
lapply(files, function(file) {
  bias <- rast(file.path(path, "cordex_esgf", "eval_bias", file)) %>% 
    resample(hist)
  proj <- hist + bias*10
  writeRaster(x = proj, 
              filename = file.path(path, "cordex_esgf", "eval_ds", file))
})
dir.create(file.path(path, "cordex_esgf", "proj_ds"))
files <- list.files(file.path(path, "cordex_esgf", "proj_bias"), pattern = "tas")
lapply(files, function(file) {
  bias <- rast(file.path(path, "cordex_esgf", "proj_bias", file)) %>% 
    resample(hist)
  proj <- hist + bias*10
  writeRaster(x = proj, 
              filename = file.path(path, "cordex_esgf", "proj_ds", file))
})
```

```{r cordex_eval_ds_plot}
#| message: false
rcp85 <- rast(list.files(file.path(path, "cordex_esgf", "eval_ds"),
                pattern = "rcp85", full.names = TRUE)) %>% 
  mean()
rcp26 <- rast(list.files(file.path(path, "cordex_esgf", "eval_ds"),
                pattern = "rcp26", full.names = TRUE)) %>% 
  mean()
ggplot() +
  tidyterra::geom_spatraster(data = rcp85) +
  scale_fill_viridis_c("tas (K)") +
  theme_bw() +
  ggtitle("Mean evaluation downscaled for RCP 8.5") +
  ggplot() +
  tidyterra::geom_spatraster(data = rcp26) +
  scale_fill_viridis_c("tas (K)") +
  theme_bw() +
  ggtitle("Mean evaluation downscaled for RCP 2.6") + 
  plot_layout(ncol = 1)
```

## CMIP5 from ESGF

Test with CORDEX using [IPSL](https://esgf-node.ipsl.upmc.fr/search/cordex-ipsl/) node:

-   3 driving GCM: MPI-M-MPI-ESM-LR, MPI-M-MPI-ESM-MR, NCC-NorESM1-M
-   3 experiments: historical, RCP 2.6, & RCP 8.5
-   ensemble r1i1p1
-   time frequency of monthly means
-   1 variables: temperature at surface

To split in three datasets: historical (1980:2005), evaluation (2006:2019) and projection (2071:2100) means.

```{r cmip5}
#| eval: false
historical <- 1980:2005
dir.create(file.path(path, "cmip5_esgf", "historical"))
files <- list.files(file.path(path, "cmip5_esgf", "raw"), pattern = "historical")
lapply(files, function(file){
  var <- str_split_1(file, "_")[1]
  gcm <- str_split_1(file, "_")[3]
  rcp <- str_split_1(file, "_")[4]
  rast(file.path(path, "cmip5_esgf", "raw", file)) %>% 
         crop(nc_bb) %>% 
         subset(grepl("tas", names(.))) %>% 
         subset(year(time(.)) %in% historical) %>% 
         tapp(months, mean) %>% 
         writeRaster(file.path(path, "cmip5_esgf", "historical",  
                        paste0(var, "_", gcm, "_none_", rcp, ".tif")))
})
evaluation <- 2006:2019
dir.create(file.path(path, "cmip5_esgf", "evaluation"))
files <- list.files(file.path(path, "cmip5_esgf", "raw"), pattern = "_rcp")
lapply(files, function(file){
  var <- str_split_1(file, "_")[1]
  gcm <- str_split_1(file, "_")[3]
  rcp <- str_split_1(file, "_")[4]
  rast(file.path(path, "cmip5_esgf", "raw", file)) %>% 
         crop(nc_bb) %>% 
         subset(grepl("tas", names(.))) %>% 
         subset(year(time(.)) %in% evaluation) %>% 
         tapp(months, mean) %>% 
         writeRaster(file.path(path, "cmip5_esgf", "evaluation",  
                        paste0(var, "_", gcm, "_none_", rcp, ".tif")))
})
projection <- 2071:2100
dir.create(file.path(path, "cmip5_esgf", "projection"))
files <- list.files(file.path(path, "cmip5_esgf", "raw"), pattern = "_rcp")
lapply(files, function(file) {
  var <- str_split_1(file, "_")[1]
  gcm <- str_split_1(file, "_")[3]
  rcp <- str_split_1(file, "_")[4]
  rast(file.path(path, "cmip5_esgf", "raw", file)) %>% 
         crop(nc_bb) %>% 
         subset(grepl("tas", names(.))) %>% 
         subset(year(time(.)) %in% projection) %>% 
         tapp(months, mean) %>% 
         writeRaster(file.path(path, "cmip5_esgf", "projection",  
                      paste0(var, "_", gcm, "_none_", rcp, ".tif")))
})
```

### Bias

Bias is simply computed as projection minus historical means for both evaluation and projection means.

```{r cmip5_bias}
#| eval: false
dir.create(file.path(path, "cmip5_esgf", "eval_bias"))
files <- list.files(file.path(path, "cmip5_esgf", "evaluation"), pattern = "tas")
lapply(files, function(file) {
  var <- str_split_1(file, "_")[1]
  gcm <- str_split_1(file, "_")[2]
  rcm <- str_split_1(file, "_")[3]
  rcp <- gsub(".tif", "", str_split_1(file, "_")[4])
  (rast(file.path(path, "cmip5_esgf", "evaluation", file)) -
    rast(file.path(path, "cmip5_esgf", "historical", 
                   paste0(var, "_", gcm, "_", rcm, "_historical.tif")))) %>% 
    writeRaster(file.path(path, "cmip5_esgf", "eval_bias", file))
})
dir.create(file.path(path, "cmip5_esgf", "proj_bias"))
files <- list.files(file.path(path, "cmip5_esgf", "projection"), pattern = "tas")
lapply(files, function(file) {
  var <- str_split_1(file, "_")[1]
  gcm <- str_split_1(file, "_")[2]
  rcm <- str_split_1(file, "_")[3]
  rcp <- gsub(".tif", "", str_split_1(file, "_")[4])

  (rast(file.path(path, "cmip5_esgf", "projection", file)) -
    rast(file.path(path, "cmip5_esgf", "historical", 
                   paste0(var, "_", gcm, "_", rcm, "_historical.tif")))) %>% 
    writeRaster(file.path(path, "cmip5_esgf", "proj_bias", file))
})
```

### Interpolation & downscaling

Bias is then interpolated to CHELSA resolution using bilinear interpolation (other available). Finally, CORDEX is downscaled on CHELSA by adding the interpolated bias to CHELSA historical means.

```{r cmip5_eval_ds}
#| eval: false
dir.create(file.path(path, "cmip5_esgf", "eval_ds"))
files <- list.files(file.path(path, "cmip5_esgf", "eval_bias"), pattern = "tas")
lapply(files, function(file) {
  bias <- rast(file.path(path, "cmip5_esgf", "eval_bias", file)) %>% 
    resample(hist)
  proj <- hist + bias*10
  writeRaster(x = proj, 
              filename = file.path(path, "cmip5_esgf", "eval_ds", file))
})
dir.create(file.path(path, "cmip5_esgf", "proj_ds"))
files <- list.files(file.path(path, "cmip5_esgf", "proj_bias"), pattern = "tas")
lapply(files, function(file) {
  bias <- rast(file.path(path, "cmip5_esgf", "proj_bias", file)) %>% 
    resample(hist)
  proj <- hist + bias*10
  writeRaster(x = proj, 
              filename = file.path(path, "cmip5_esgf", "proj_ds", file))
})
```

```{r cmip5_eval_ds_plot}
#| message: false
rcp85 <- rast(list.files(file.path(path, "cmip5_esgf", "eval_ds"),
                pattern = "rcp85", full.names = TRUE)) %>% 
  mean()
rcp26 <- rast(list.files(file.path(path, "cmip5_esgf", "eval_ds"),
                pattern = "rcp26", full.names = TRUE)) %>% 
  mean()
ggplot() +
  tidyterra::geom_spatraster(data = rcp85) +
  scale_fill_viridis_c("tas (K)") +
  theme_bw() +
  ggtitle("Mean evaluation downscaled for RCP 8.5") +
  ggplot() +
  tidyterra::geom_spatraster(data = rcp26) +
  scale_fill_viridis_c("tas (K)") +
  theme_bw() +
  ggtitle("Mean evaluation downscaled for RCP 2.6") + 
  plot_layout(ncol = 1)
```

## Evaluation

Evaluation is based on probability density functions (PDF), correlation coefficient (CC), root mean square error (RMSE) and bias for the downscaled and CHELSA evaluation means (2006:2019).

### Probability density functions

The downscaled PDF shows a very good match with the CHELSA original data.

```{r}
#| eval: false
n <- 10^4
points <- st_sample(nc_bb, 10^4) %>% vect()
  
chelsa <- terra::extract(eval, points) %>% 
  gather(month, value, -ID) %>% 
  mutate(variable = "tas", type = "raw", origin = "CHELSA",
                     gcm = "", rcm = "", rcp = "")

raw_cordex_files <- list.files(file.path(path, "cordex_esgf", "evaluation"), 
           pattern = "tas", full.names = TRUE)
names(raw_cordex_files) <- list.files(file.path(path, "cordex_esgf", "evaluation"), 
           pattern = "tas", full.names = FALSE)
raw_cordex <- raw_cordex_files %>% 
  lapply(rast) %>% 
  lapply(terra::extract, points) %>% 
  bind_rows(.id = "file") %>% 
  gather(month, value, -file, -ID) %>%
  filter(month == "janvier") %>% 
  mutate(month = "january") %>% 
  separate(file, c("variable", "gcm", "rcm", "rcp"), "_") %>% 
  mutate(rcp = gsub(".tif", "", rcp)) %>% 
  mutate(type = "raw", origin = "cordex") %>% 
  mutate(value = value*10)

ds_cordex_files <- list.files(file.path(path, "cordex_esgf", "eval_ds"), 
           pattern = "tas", full.names = TRUE)
names(ds_cordex_files) <- list.files(file.path(path, "cordex_esgf", "eval_ds"), 
           pattern = "tas", full.names = FALSE)
ds_cordex <- ds_cordex_files %>% 
  lapply(rast) %>% 
  lapply(terra::extract, points) %>% 
  bind_rows(.id = "file") %>% 
  gather(month, value, -file, -ID) %>%
  filter(month == "lyr1") %>% 
  mutate(month = "january") %>% 
  separate(file, c("variable", "gcm", "rcm", "rcp"), "_") %>% 
  mutate(rcp = gsub(".tif", "", rcp)) %>% 
  mutate(type = "downscaled", origin = "cordex")

raw_cmip_files <- list.files(file.path(path, "cmip5_esgf", "evaluation"), 
           pattern = "tas", full.names = TRUE)
names(raw_cmip_files) <- list.files(file.path(path, "cmip5_esgf", "evaluation"), 
           pattern = "tas", full.names = FALSE)
raw_cmip <- raw_cmip_files %>% 
  lapply(rast) %>% 
  lapply(terra::extract, points) %>% 
  bind_rows(.id = "file") %>% 
  gather(month, value, -file, -ID) %>%
  filter(month == "janvier") %>% 
  mutate(month = "january") %>% 
  separate(file, c("variable", "gcm", "rcm", "rcp"), "_") %>% 
  mutate(rcp = gsub(".tif", "", rcp)) %>% 
  mutate(type = "raw", origin = "cmip") %>% 
  mutate(value = value*10)

ds_cmip_files <- list.files(file.path(path, "cmip5_esgf", "eval_ds"), 
           pattern = "tas", full.names = TRUE)
names(ds_cmip_files) <- list.files(file.path(path, "cmip5_esgf", "eval_ds"), 
           pattern = "tas", full.names = FALSE)
ds_cmip <- ds_cmip_files %>% 
  lapply(rast) %>% 
  lapply(terra::extract, points) %>% 
  bind_rows(.id = "file") %>% 
  gather(month, value, -file, -ID) %>%
  filter(month == "lyr1") %>% 
  mutate(month = "january") %>% 
  separate(file, c("variable", "gcm", "rcm", "rcp"), "_") %>% 
  mutate(rcp = gsub(".tif", "", rcp)) %>% 
  mutate(type = "downscaled", origin = "cmip")


bind_rows(chelsa, raw_cordex, ds_cordex, raw_cmip, ds_cmip) %>% 
  write_tsv(file.path(path, "cordex_esgf", "eval_pdf.tsv"))

chelsa %>% 
  select(chelsa, -gcm, -rcm, -rcp, -type, -origin) %>% 
  rename(observed = value) %>% 
  left_join(ds_cordex %>% 
              select(-type, -origin) %>% 
              rename(downscaled_cordex = value)) %>% 
  left_join(raw_cordex %>% 
              select(-type, -origin) %>% 
              rename(raw_cordex = value)) %>% 
    left_join(ds_cmip %>% 
              select(-type, -origin, -rcm) %>% 
              rename(downscaled_cmip = value)) %>% 
  left_join(raw_cmip %>% 
              select(-type, -origin, -rcm) %>% 
              rename(raw_cmip = value)) %>% 
  summary()

list( 
select(chelsa, -gcm, -rcm, -rcp, -type, -origin) %>% 
  rename(observed = value) %>% 
  left_join(raw_cordex),
select(chelsa, -gcm, -rcm, -rcp, -type, -origin) %>% 
  rename(observed = value) %>% 
  left_join(ds_cordex),
select(chelsa, -gcm, -rcm, -rcp, -type, -origin) %>% 
  rename(observed = value) %>% 
  left_join(raw_cmip),
select(chelsa, -gcm, -rcm, -rcp, -type, -origin) %>% 
  rename(observed = value) %>% 
  left_join(ds_cmip)
) %>% bind_rows() %>% 
  rename(predicted = value) %>% 
  write_tsv(file.path(path, "cordex_esgf", "eval_op.tsv"))
```

```{r pdf}
#| warning: false
vroom::vroom(file.path(path, "cordex_esgf", "eval_pdf.tsv")) %>% 
  ggplot(aes(value/10-273.15, group = paste(origin, type, gcm, rcm, rcp),
             col = paste(origin, type))) +
  geom_density() +
  facet_wrap(~ paste(origin, type)) + 
  theme_bw() + xlab("Temperature (°C)") + ylab("") +
  scale_color_discrete(guide = "none")
```

### Metrics

CC is very good with values 0.99 for most cases and RMSE very low with values below 0.5°C in most cases. However, bias seems spatially structured mainly on land, which might problematic, despite very low.

```{r}
#| eval: false
vroom::vroom(file.path(path, "cordex_esgf", "eval_op.tsv")) %>% 
  na.omit() %>% 
  group_by(variable, gcm, rcm, rcp, type, origin) %>% 
  summarise(cc = cor(predicted, observed, method = "pearson"), 
            rmse = sqrt(mean((predicted/10-observed/10)^2)),
            bias = mean(predicted/10-observed/10)) %>% 
  write_tsv(file.path(path, "cordex_esgf", "eval_metrics.tsv"))
```

```{r cc}
#| message: false
#| warning: false
read_tsv(file.path(path, "cordex_esgf", "eval_metrics.tsv")) %>% 
  ggplot(aes(rmse, 1-cc, col = paste(gcm, rcm), shape = rcp)) +
  stat_ellipse(geom = "polygon", alpha = 0.1, 
               aes(fill = paste(origin, type), 
                   group = paste(origin, type))) +
  geom_point() +
  theme_bw() +
  scale_y_log10(labels = function(x) 1-x) +
  scale_x_log10() +
  scale_color_discrete("") +
  scale_fill_discrete("") +
  scale_shape_discrete("") +
  guides(fill = guide_legend(ncol = 2),
         shape = guide_legend(ncol = 2)) +
  xlab("Root Mean Square Error (RMSE, °C)") +
  ylab("Correlation Coefficient (CC)") +
  theme(legend.spacing = unit(0, "npc"), 
        legend.title = element_blank())
```

```{r bias_cordex}
#| message: false
proj_mean <- list.files(file.path(path, "cordex_esgf", "eval_ds"), 
           pattern = "tas", full.names = TRUE) %>% 
  lapply(rast) %>% 
  lapply(subset, 1) %>% 
  rast() %>% 
  mean()
bias <- (proj_mean - eval)/10
ggplot() +
  tidyterra::geom_spatraster(data = bias) +
  scale_fill_viridis_c("bias (K)") +
  theme_bw() +
  ggtitle("CORDEX mean bias")
```

```{r bias_cmip}
#| message: false
proj_mean <- list.files(file.path(path, "cmip5_esgf", "eval_ds"), 
           pattern = "tas", full.names = TRUE) %>% 
  lapply(rast) %>% 
  lapply(subset, 1) %>% 
  rast() %>% 
  mean()
bias <- (proj_mean - eval)/10
ggplot() +
  tidyterra::geom_spatraster(data = bias) +
  scale_fill_viridis_c("bias (K)") +
  theme_bw() +
  ggtitle("CMIP5 mean bias")
```
