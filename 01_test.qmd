# Test {.unnumbered}

Here is a small chapter to help you test DownClim.

## Installation

You only need mamba to get everything else. See <https://github.com/conda-forge/miniforge#mambaforge> for mambaforge installation. Once mamba installed you can add Python â‰¥3.5 and Snakemake â‰¥5.24.1, eventually using an environment called snakmake as is:

```         
conda activate base
mamba create -c conda-forge -c bioconda -n snakemake snakemake
conda activate snakemake
snakemake --help
```

## Credentials

Data are retrieve from ESGF through the [Institut Pierre-Simon Laplace node](https://esgf-node.ipsl.upmc.fr/search/cordex-ipsl/). You need first to [create an account](https://esgf.github.io/esgf-user-support/user_guide.html#create-an-account) on this page ([create account](https://esgf-node.ipsl.upmc.fr/user/add/?next=http://esgf-node.ipsl.upmc.fr/search/cordex-ipsl/) link at corner right). Then youâ€™ll need to register credentials locally to use the workflow. For that use a credentials_esgf yaml file reported in config.yml with keys openid and pwd. For example using bash in linux:

```         
openid=https://esgf-node.ipsl.upmc.fr/esgf-idp/openid/{user}
pwd={pwd}
echo -e "openid: $openid\npwd: $pwd" > config/credentials_esgf.yml
```

## Configuration

The configuration used by the workflow is defined at the top of the `Snakefile`:

```         
configfile: "config/config_all.yml"

...
```

I suggest you use `config/config_ex.yml`. Do not hesitate to manually edit the configuration file. You may need to change the projection list `config/projections_ex.tsv` (all available are listed in `config/projections_all.tsv`) and the country domains `config/domains.tsv` accordingly.

## Dry run

To avoid sending large computation, I suggest you first use a dry run to check what you have scheduled with snakemake. For that use:

```         
snakemake -np # dry run
```

You should obtain a similar table summarising all the jobs you are about to launch:

```         
Job stats:
job             count
------------  -------
all                 1
downscale_bc        8
eval_proj           4
get_chelsa2         1
get_cmip6           1
get_cordex          1
hist_base           2
hist_proj           4
merge_eval          1
merge_hist          1
total              24
```

## Run

Then you are ready to run the workflow with:

```         
snakemake -j 10 --resources mem_mb=10000 --use-conda --keep-runnning
```

`-j` defines the maximum number of cores to be used at a time and similarly `-- ressources mem_mb` the maximum memory. `--use-conda` is mandatory as the workflow is using it to deal with environments. I advice on using `-keep-running` to ask the workflow to continue running if a rule fails. You may add `-rerun--incomplete` if you stopped a running workflow.

## Results

All results are gathered in the `results/` folder with:

-   `results/areas/` the countries shape files
-   `results/baselines/` CHELSA 2 data
-   `results/benchmarks/` benchmarking statistics
-   `results/downscaled/` downscaled projections
-   `results/evaluation/` evaluations and histograms tables
-   `results/logs/` all scripts logs
-   `results/projections/` CORDEX & CMIP6 data

So the main results are in `results/downscaled/` and `results/evaluation/`.

## Benchmark

You can have a look to the pipeline performances with snakemake automatic reports using:

```         
snakemake --report
```

which will produce a report.html summary. Or using the R code available in the `README.qmd`.

## Rule tests

If you want to test manually how a rule and its associated script works, you can use the dev-dc environment as follow:

```         
mamba env create -f envs/dev-dc.yml # init
mamba env update -f envs/dev-dc.yml --prune # update
mamab activate dev-dc
```

Then you can use any IDE (for instance Visual Studio Code) to manually run a script from `scripts/`. Most script will have a commented test section that you can uncomment and adapt with your local files to test the script.

## Bugs

If you have bugs as we are a small teams you may simply send us or me a mail. However, you may also take advantage of GitHub to submit a new issue: <https://github.com/sylvainschmitt/DownClim/issues> . Do not hesitate to use issues for bugs / error reports, but also suggest enhancement including future developments or simply improved user friendliness.

## Contributing

If you feels comfortable you may also suggest developments. For that please use forks of the repository on GitHub and pull request changes to the `dev` branch on GitHub.

Have a nice testing [ðŸ˜‰](https://emojipedia.org/fr/visage-faisant-un-clin-d-%C5%93il),

*Sylvain*
