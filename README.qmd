---
title: "DownClim - Downscale Climate Projections"
author: Sylvain Schmitt -
date: today
date-format: medium
format: 
  gfm:
    toc: true
    toc-depth: 2
---

```{r setup, include=FALSE}
rm(list = ls()) ; invisible(gc()) ; set.seed(42)
library(knitr)
library(tidyverse)
library(terra)
theme_set(bayesplot::theme_default())
opts_chunk$set(echo = F, message = F, warning = F, fig.height = 6, fig.width = 8,
               cache = F, cache.lazy = F)
```

[`snakemake`](https://github.com/sylvainschmitt/snakemake_singularity) workflow to downscale climate projections.

[![Project Status: WIP – Initial development is in progress, but there has not yet been a stable, usable release suitable for the public.](https://www.repostatus.org/badges/latest/wip.svg)](https://www.repostatus.org/#wip)

**Description.**

```{r dag, fig.cap="Workflow."}
knitr::include_graphics("dag/dag.svg")
```

# Installation

This workflow is built on:

-   [x] Python ≥3.5
-   [x] [Mambaforge](https://github.com/conda-forge/miniforge#mambaforge)
-   [x] Snakemake ≥5.24.1

```{bash, eval=F, echo=T}
conda activate base
mamba create -c conda-forge -c bioconda -n snakemake snakemake
conda activate snakemake
snakemake --help
```

Once installed simply clone the workflow:

```{bash, eval=F, echo=T}
git clone git@github.com:sylvainschmitt/DownClim.git
cd DownClim
snakemake -np 
```

# Credentials

**To further update following the `get_cordex` rule with `pyesgf`.**

Data are retrieve from the [Institut Pierre-Simon Laplace node](https://esgf-node.ipsl.upmc.fr/search/cordex-ipsl/). You need first to [create an account](https://esgf.github.io/esgf-user-support/user_guide.html#create-an-account) on this page ([create account](https://esgf-node.ipsl.upmc.fr/user/add/?next=http://esgf-node.ipsl.upmc.fr/search/cordex-ipsl/) link at corner right).

Then you'll need to register credentials locally to use the workflow. A [help page](https://esgf.github.io/esgf-user-support/user_guide.html?highlight=credentials%20pem#access-data-with-the-command-line-via-opendap) is available. In linux, you need `myproxy-logon` installed and to run this command line (with your user name):

``` bash
myproxy-logon -sesgf-node.ipsl.upmc.fr -l {user_name} -b -T -t 72 -o ~/.esg/credentials.pem
```

To run the workflow on a cluster, you can simply copy your local credentials to the cluster. For instance:

``` bash
cp ~/.esg/credentials.pem /my_cluster/
```

# Usage

```{bash, eval=F, echo=T}
module load bioinfo/Snakemake/7.20.0 # for test on nod depending on your HPC
snakemake -np # dry run
snakemake --dag | dot -Tsvg > dag/dag.svg # dag
snakemake -j 1 --resources mem_mb=10000 # local run (test)
sbatch job_muse.sh # HPC run with slurm
```

# Config

# Workflow

## Area

### [get_area](https://github.com/sylvainschmitt/DownClim/blob/main/rules/get_area.py)

-   Script: [`get_area.py`](https://github.com/sylvainschmitt/DownClim/blob/main/scripts/get_area.py)
-   Environment: [`gadm.yml`](https://github.com/sylvainschmitt/DownClim/blob/main/envs/gadm.yml)

Python script to get area limits with GADM if country or continent, 
or based simply on a user-defined bounding-box.
Sampling points are further defined on the land for evaluation.

## Baseline

### [get_chelsa](https://github.com/sylvainschmitt/DownClim/blob/main/rules/get_chelsa.py)

-   Script: [`get_chelsa.py`](https://github.com/sylvainschmitt/DownClim/blob/main/scripts/get_chelsa.py)
-   Environment: [`xarray.yml`](https://github.com/sylvainschmitt/DownClim/blob/main/envs/xarray.yml)

Python script to download, crop, adjust CHELSA monthly variables.

## Projection

### [get_cordex](https://github.com/sylvainschmitt/DownClim/blob/main/rules/get_cordex.py)

-   Script: [`get_cordex.py`](https://github.com/sylvainschmitt/DownClim/blob/main/scripts/get_cordex.py)
-   Environment: [`xarray.yml`](https://github.com/sylvainschmitt/DownClim/blob/main/envs/xarray.yml)

Python script to download, crop, reproject, and adjust CORDEX monthly variables.

## Downscaling

### [downscale_bc](https://github.com/sylvainschmitt/DownClim/blob/main/rules/downscale_bc.py)

-   Script: [`downscale_bc.py`](https://github.com/sylvainschmitt/DownClim/blob/main/scripts/downscale_bc.py)
-   Environment: *to be defined*

Python script to compute downscaled projection with bias correction (delta or change-factor method).
Baseline and projections are summarised by means across an historical and a projected period (e.g. monthly means over 30 years).
Anomalies between historical and projected periods are computed for the projections.
Anomalies are interpolated and added to the historical period of the baseline.

## Evaluation

### [evaluate_bc](https://github.com/sylvainschmitt/DownClim/blob/main/rules/evaluate_bc.py)

-   Script: [`evaluate_bc.py`](https://github.com/sylvainschmitt/DownClim/blob/main/scripts/evaluate_bc.py)
-   Environment: *to be defined*

Python script to evaluate downscaled versus raw projection against a baseline on the defined evaluation period for bias correctino downscaling.

# Data

[**CORDEX**](https://cordex.org/)**: Coordinated Regional Climate Downscaling Experiment**

*The CORDEX vision is to advance and coordinate the science and application of regional climate downscaling through global partnerships.*

[**CHELSA V2.1.1**](https://chelsa-climate.org/)**: Climatologies at high resolution for the earth's land surface areas**

*CHELSA (Climatologies at high resolution for the earth's land surface areas) is a very high resolution (30 arc sec, \~1km) global downscaled climate data set currently hosted by the Swiss Federal Institute for Forest, Snow and Landscape Research WSL. It is built to provide free access to high resolution climate data for research and application, and is constantly updated and refined.*

# Dev

**Develop how-to dev with envs/dev.yml and mamba.**

